<div class="col-xs-6">
  <div class="row">
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Quantity</th>
          <th>Actions</th>
          <th>Price</th>
          <th>Cancel</th>
        </tr>
      </thead>
      <tbody id="order_products">
      </tbody>
    </table>
  </div>
  <div class="row">
    <%= render 'form', order: @order %>
  </div>
  <%= link_to 'Back', orders_path %>
</div>
<div class="col-xs-6" style="padding-right:50px;padding-left:50px">
  <div class='row'>
    <div class='col-xs-8 col-xs-push-4'>
      <div class="input-group">
        <div class="input-group">
          <span class="input-group-addon" id="sizing-addon2"><i class="glyphicon glyphicon-search"></i></span>
          <input type="text" class="form-control" placeholder="Search" id="search" aria-describedby="sizing-addon2">
        </div>
    </div>
  </div><br><br>
  <% if current_user.is_admin != 1 %>
    <% if @latest_order %>
    <div class="row">
      <h5>Latest Order</h5>
      <% @latest_order.products.each do |product| %>
        <div class="col-xs-3">
          <div class="panel panel-default">
            <div class="panel-body product " style="cursor:pointer" data-id="<%= product.id%>" data-price="<%= product.price %>"> <%= product.name %> <%= product.price %></div>
          </div>
        </div>
      <% end %>
    </div>
    <% end %>
  <% end %>
  <hr>
  <div id="all-products" class="row">
    <% @products.each do |product| %>
      <div class="col-xs-3">
        <div class="panel panel-default">
          <div class="panel-body product " style="cursor:pointer" data-id="<%= product.id%>" data-price="<%= product.price %>">
            <img src="<%= product.Image.url%>" class="img-thumbnail" alt="">
          </div>
          <div class="panel-footer"> <%= product.name %> <%= product.price %></div>
        </div>
      </div>
    <% end %>
  </div>
</div>
<script type="text/javascript">

  ////////////////////////////////////////////////////
  // This section is for the search functionality
  ///////////////////////////////////////////////////

  $('#search').keyup(fetch_products)

  function fetch_products(){
      search_product = $('#search').val()
      if(search_product != '' ){
        $.ajax({
          url:window.location.origin+"/products/search/" + search_product+".json",
          success: function(data){
            setProducts(data)
          }
        })
      }else{
        $.ajax({
          url:window.location.origin+"/products/search/+_all.json",
          success: function(data){
            setProducts(data)
          }
        })
      }
    }

  // sets the products after being searched
  function setProducts(data){
    $('#all-products').html('')
    for(var product in data ){
      panel = generate_product_panel(data[product].id, data[product].name, data[product].price, data[product].Image.url)
      $('#all-products').append(panel)
    }
    refresh_deps()
  }
  function generate_product_panel(id, name, price, image_url){
    panel = '<div class="col-xs-3">'
    panel+=  '<div class="panel panel-default">'
    panel+=  '<div class="panel-body product " style="cursor:pointer" data-id="'+id+'" data-price="'+price+'">'+'<img class="img-thumbnail" src="'+image_url+'"></div>'
    panel+=  '<div class="panel-footer" >' + name + "</div>"
    panel+=  '</div>'
    panel+=  '</div>'
    return panel
  }
  //////////////////////////////////////////////////
  // This section is for the form functionality
  /////////////////////////////////////////////////


  order_products = $('#order_products')
  order_products_list = {}

  // delete product in case it became unavailable
  // this function just refetches the products list and delete the product from order list if exists
  function delete_unavailable_product(id){
    // show notification for user that an item is now unavailable
    //alert(order_products_list[id].name + " Has became unavailable, sorry for any inconvinience")
    // refresh available products list
    fetch_products()
    // delete product from order list
    element = $('.product_item[data-id='+id+']')
    delete_product_item(element)
    refresh_deps()
  }
  // function to add available product , wraps fetch products and refresh deps
  function insert_available_product(){
    fetch_products()
    refresh_deps()
  }




  // generates a order product list element
  function generate_product_item(name, id, price, quantity){
    item = '<tr class="product_item" data-id='+id+'>'
    item += '<td>' + name + '</td>'
    item += '<td>' + quantity + '</td>' // quantity defaults to 1
    item += '<td>'
    item += '<i style="cursor:pointer; display:inline-block; margin-left:15px" class="glyphicon glyphicon-plus increase_count"></i>'
    item += '<br>'
    item += '<i style="cursor:pointer; margin-left:15px" class="glyphicon glyphicon-minus decrease_count"></i>'
    item += '</td>' // actions column to be updated
    item += '<td>' + price * quantity + '</td>'
    item += '<td ><span style="cursor:pointer" class="cancel_product">X</span></td>'
    item += '</tr>'
    return item
  }
  function increase_product_count(id){
    order_products_list[id]['quantity'] += 1 ;
    refresh_deps()
  }
  function decrease_product_count(id){
    if(order_products_list[id]['quantity'] > 1 ){
      order_products_list[id]['quantity'] -= 1 ;
      refresh_deps()
    }
  }
  function delete_product_item(element){
    if(order_products_list[(element.attr('data-id'))]){
      delete order_products_list[(element.attr('data-id'))];
      element.remove() ;
    }
    refresh_deps()
  }

  // overrites default submit for the form
  $('#new_order').submit(function(e){
    e.preventDefault()
  })
  $('input[name=commit]').click(function(e){
    e.preventDefault()
    $(this).prop('disabled',false) // make form resubmitable in case of any errors
    user_id = $('#order_user_id').val()
    order_note = $('#order_note').val()
    room_id = $('#order_room').val()
    order_products_list_array = []
    for ( var product_id in order_products_list){
      order_products_list_array.push([ order_products_list[product_id].id,  order_products_list[product_id].name, order_products_list[product_id].quantity])
    }
    form_validation = validate_form(user_id, room_id, order_products_list_array) ;
    if(form_validation.length == 0){
      $.ajax({
        url:window.location.origin+'/orders.json',
        method:'POST',
        data: {'order': JSON.stringify(order_products_list_array),
         'user_id': user_id,
         'order_note': order_note,
         'room_id' : room_id
        },
        success: function(data){
          $('.notice').text("Order submitted successfully!")
          window.location = data.url.slice(0,data.url.lastIndexOf('/'))
        },
        error:function(err){
          render_errors([errors])
        }
      })
    }else{
      render_errors(form_validation)
    }

  });

  // validates the form
  function validate_form(user_id, room_id, order_products_list_array){
    errors = []
    if(!user_id && <%= current_user.is_admin %> == 1 ){
      errors.push("You must select user")
    }
    if(!room_id || room_id.trim() == "" ){
      errors.push("You must select Room")
    }
    if(order_products_list_array.length == 0 ){
      errors.push("You must choose at least one product")
    }
    return errors
  }

  ////////////////////////////////////////////////////////////////////
  // these functions are meant to update the UI as user fire events
  ///////////////////////////////////////////////////////////////////
  function refresh_deps(){
    refresh_products_list() // refresh the product list to update the UI
    refresh_action_listeneres() //
  }
  refresh_deps()
  // to refresh action listeners on newely added items
  function refresh_action_listeneres(){
    $('.product').off()
    // add product to product order list on click
    $('.product').click(function(e){
      id=$(this).attr('data-id')
      price = $(this).attr('data-price')
      name = $(this).siblings('.panel-footer').text()
      console.log(name);
      order_item = generate_product_item(name, id, price)
      // if order item doesn't exist, create it.
      // otherwise increment the quantity attribute
      if(order_products_list[id] == undefined){
        order_products_list[id] = {
          'id' : id,
          'name' : name,
          'price': price,
          'quantity': 1
        }
      }else{
          increase_product_count(id)
      }
      refresh_deps()
    })
    $('.cancel_product').off()
    $('.cancel_product').click(function(e){
      e.preventDefault()
      element = $(this).parent().parent();
      delete_product_item(element)
    })
    $('.increase_count').off()
    $('.increase_count').click(function(e){
      increase_product_count($(this).parent().parent().attr('data-id'))
    })
    $('.decrease_count').off()
    $('.decrease_count').click(function(e){
      decrease_product_count($(this).parent().parent().attr('data-id'))
    })
  }
  // refresh the order product list in the form
  function refresh_products_list(){
    total_price = $('#order_total_price')
    total_price.val(0)

    order_products.html('');
    for (var key in order_products_list) {
        // skip loop if the property is from prototype
        if (!order_products_list.hasOwnProperty(key)) continue;

        var product = order_products_list[key];
        item = generate_product_item(product.name, product.id, product.price, product.quantity)
        order_products.append(item)
        newPrice = parseInt(product.price) * parseInt(product.quantity) + parseInt(total_price.val())
        total_price.val(newPrice)
    }
  }
  // pushes errors to the UI
  function render_errors(errors){
    err = "<div id='error_explanation'>"
    err += "<ul>"
    for( var error in errors ){
      err += "<li>"+errors[error]+"</li>"
    }
    err += "</ul>"
    err += "</div>"
    $('.error').html(err)
  }
</script>
